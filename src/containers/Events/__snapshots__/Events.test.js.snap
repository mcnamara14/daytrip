// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Events should match the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Events
    events={
        Array [
            Object {
              "date": "2018-05-30 2018-05-27T17:13:38-06:00",
              "id": "Zrt9dk32l",
              "image": "https://s1.ticketm.allswifty.jpg",
              "latitude": "39.735001",
              "longitude": "-105.020401",
              "price": "$300+",
              "title": "T Swift",
              "venue": "Boulder Theater",
            },
          ]
    }
    selectedEvent={
        Object {
            "date": "2018-05-30 2018-05-27T17:13:38-06:00",
            "id": "Zrt9dk32l",
            "image": "https://s1.ticketm.allswifty.jpg",
            "latitude": "39.735001",
            "longitude": "-105.020401",
            "price": "$300+",
            "title": "T Swift",
            "venue": "Boulder Theater",
          }
    }
    suggestedBars={
        Array [
            Object {
              "address": "1420 E 18th Ave Denver, CO 80218",
              "image_url": "https://s3-media3.fl.yelpcdn.com/tg/o.jpg",
              "name": "Beebs",
              "price": "$$",
              "rating": 4.5,
              "review_count": 450,
            },
          ]
    }
    suggestedRestaurants={
        Array [
            Object {
              "address": "1420 E 18th Ave Denver, CO 80218",
              "image_url": "https://s3-media3.fl.yelpcdn.com/tg/o.jpg",
              "name": "Beebs",
              "price": "$$",
              "rating": 4.5,
              "review_count": 450,
            },
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Unknown />,
        <div
          className="eventsStopsSelection"
>
          <Connect(EventsSearch) />
          <Connect(StopsSelection) />
</div>,
        <Connect(SelectedEvent) />,
        <Connect(Plans) />,
      ],
      "className": "eventsContainer",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(EventsSearch) />,
            <Connect(StopsSelection) />,
          ],
          "className": "eventsStopsSelection",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Unknown />,
          <div
            className="eventsStopsSelection"
>
            <Connect(EventsSearch) />
            <Connect(StopsSelection) />
</div>,
          <Connect(SelectedEvent) />,
          <Connect(Plans) />,
        ],
        "className": "eventsContainer",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(EventsSearch) />,
              <Connect(StopsSelection) />,
            ],
            "className": "eventsStopsSelection",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
